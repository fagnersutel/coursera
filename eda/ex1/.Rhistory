panel = function(x, y, ...)
{
panel.grid(h = -1, v = -1)
panel.abline(h = 0)
panel.xyplot(x, y, ...)
}
)
install.packages("lattice")
library(lattice)
xyplot(lnWeight ~ lnLength, data = alligator,
xlab = "Snout vent length (inches) on log scale",
ylab = "Weight (pounds) on log scale",
main = "Alligators in Central Florida"
)
alli.mod1 = lm(lnWeight ~ lnLength, data = alligator)
summary(alli.mod1)
xyplot(resid(alli.mod1) ~ fitted(alli.mod1),
xlab = "Fitted Values",
ylab = "Residuals",
main = "Residual Diagnostic Plot",
panel = function(x, y, ...)
{
panel.grid(h = -1, v = -1)
panel.abline(h = 0)
panel.xyplot(x, y, ...)
}
)
qqmath( ~ resid(alli.mod1),
xlab = "Theoretical Quantiles",
ylab = "Residuals"
)
rm(list=ls())
ls()
#Problema de Exemplo
#Paraesta analise utilizaremos o dataset "cars" nativo do R. cars ?? um dataset built-in padr??o do R que torna f??cil a demonstra????o de uma regress??o
#linear de modo simples e pr??tico.
#O dataset pode ser acessado diretamente apenas escrevendo cars no console do R. Ap??s isso ?? poss??vel identificar que o dataset consiste de 50 observa????es
#com duas vari??veis, sendo elas dist e speed, vamos verificar as primeiras cinco observa????es
head(cars)
#SCATTER PLOT
#scatter plot pode ajudar a visualizar qualquer rela????o linear entre preditores e desfechos. Idealmente se voc?? possui miltiplos preditores, o scatter plot ?? plotado para cada um deles
#contra a vari??vel de desfecho, atrav??s da linha de melhor ajuste, como visto abaixo.
par(mfrow=c(1,1))#divide a area de plotagem em uma coluna
scatter.smooth(x=cars$speed, y=cars$dist, mail="Dist ~Speed")#scatterplot
par(mfrow=c(1,2))#divide a area de plotagem em dias colunas
boxplot(cars$speed, main="Speed", sub=paste("Outlier rows: ", boxplot.stats(cars$speed)$out))  #plotagem para 'Speed'
boxplot(cars$dist, main="Distances", sub=paste("Outlier rows: ", boxplot.stats(cars$dist)$out))  #plotagem para 'Speed'
# Load data
data(iris)
head(iris, 3)
# log transform
log.ir <- log(iris[, 1:4])
ir.species <- iris[, 5]
# apply PCA - scale. = TRUE is highly
# advisable, but default is FALSE.
ir.pca <- prcomp(log.ir,
center = TRUE,
scale. = TRUE) 1
# apply PCA - scale. = TRUE is highly
# advisable, but default is FALSE.
ir.pca <- prcomp(log.ir, center = TRUE,scale. = TRUE)
# print method
print(ir.pca)
# plot method
plot(ir.pca, type = "l")
# summary method
summary(ir.pca)
# Predict PCs
predict(ir.pca, newdata=tail(log.ir, 2))
# Predict PCs
predict(ir.pca, newdata=tail(log.ir, 2))
# print method
print(ir.pca)
# plot method
plot(ir.pca, type = "l")
# summary method
summary(ir.pca)
# Predict PCs
predict(ir.pca, newdata=tail(log.ir, 2))
library(devtools)
install_github("ggbiplot", "vqv")
library(ggbiplot)
g <- ggbiplot(ir.pca, obs.scale = 1, var.scale = 1,
groups = ir.species, ellipse = TRUE,
circle = TRUE)
g <- g + scale_color_discrete(name = '')
g <- g + theme(legend.direction = 'horizontal',
legend.position = 'top')
print(g)
require(caret)
trans = preProcess(iris[,1:4],
method=c("BoxCox", "center",
"scale", "pca"))
PC = predict(trans, iris[,1:4])
# Retained PCs
head(PC, 3)
#https://www.r-bloggers.com/computing-and-visualizing-pca-in-r/
# Load data
data(iris)
head(iris, 3)
# log transform
log.ir <- log(iris[, 1:4])
ir.species <- iris[, 5]
# apply PCA - scale. = TRUE is highly
# advisable, but default is FALSE.
ir.pca <- prcomp(log.ir, center = TRUE,scale. = TRUE)
# print method
print(ir.pca)
# plot method
plot(ir.pca, type = "l")
# plot method
plot(ir.pca, type = "l")
# summary method
summary(ir.pca)
# Predict PCs
predict(ir.pca, newdata=tail(log.ir, 2))
library(devtools)
install.packages("devtools")
install_github("ggbiplot", "vqv")
library(ggbiplot)
g <- ggbiplot(ir.pca, obs.scale = 1, var.scale = 1,
groups = ir.species, ellipse = TRUE,
circle = TRUE)
g <- g + scale_color_discrete(name = '')
g <- g + theme(legend.direction = 'horizontal',
legend.position = 'top')
print(g)
install_github("ggbiplot", "vqv")
install_github("vqv/ggbiplot")
library(devtools)
install_github("vqv/ggbiplot")
library(ggbiplot)
g <- ggbiplot(ir.pca, obs.scale = 1, var.scale = 1,
groups = ir.species, ellipse = TRUE,
circle = TRUE)
g <- g + scale_color_discrete(name = '')
g <- g + theme(legend.direction = 'horizontal',
legend.position = 'top')
print(g)
require(caret)
trans = preProcess(iris[,1:4],
method=c("BoxCox", "center",
"scale", "pca"))
PC = predict(trans, iris[,1:4])
# Retained PCs
head(PC, 3)
##EXEMPLO 2
data("iris")
str(iris)
summary(iris)
##partition data
set.seed(111)
ind <- sample(2. nrow(iris), replace = TRUE, prob = c(0.8, 0.2))
ind <- sample(2, nrow(iris), replace = TRUE, prob = c(0.8, 0.2))
##partition data
set.seed(111)
ind <- sample(2, nrow(iris), replace = TRUE, prob = c(0.8, 0.2))
training <- iris[ind==1, ]
tresting <- iris[ind==2, ]
training
tresting
testing <- iris[ind==2, ]
##EXEMPLO 2
data("iris")
str(iris)
summary(iris)
##partition data
set.seed(111)
ind <- sample(2, nrow(iris), replace = TRUE, prob = c(0.8, 0.2))
training <- iris[ind==1, ]
testing <- iris[ind==2, ]
##Scatter Plots e Coeficientes de Correlacao
library(psych)
##Scatter Plots e Coeficientes de Correlacao
library(psych)
pairs.panels(training[ ,-5], gap = 0, bg = c("red", "yellow", "blue")[training$Species])
##PCA principal component analysis
pc<- prcomp(trainingg[ ,-5], center = TRUE, scale. = TRUE)
##PCA principal component analysis
pc<- prcomp(training[ ,-5], center = TRUE, scale. = TRUE)
attributes(pc)
pc$center
mean(training$Sepal.Length)
pc$scale
sd(training$Sepal.Length)
pc
summary(pc)
##Ortoganalidade dos principais componentes
pairs.panels(pc$x,
gap=0,
bg=c("red","yellow","blue")[training$Species],
pch = 21)
##bi-plot
library(devtools)
##bi-plot
library(devtools)
library(ggbiplot)
g <- ggbiplot(pc, obs.scale = 1, var.scale = 1, groups = training$Species, ellipse = TRUE, circle = TRUE, ellipse.prob = 0.68)
g <- ggbiplot(pc, obs.scale = 1, var.scale = 1, groups = training$Species, ellipse = TRUE, circle = TRUE, ellipse.prob = 0.68)
g <- g + scale_color_discrete(name = '')
g <- g + theme(legend.direction = 'horizontal', legend.position = 'top')
print(g)
#https://www.r-bloggers.com/computing-and-visualizing-pca-in-r/
# Load data
data(iris)
head(iris, 3)
# log transform
log.ir <- log(iris[, 1:4])
ir.species <- iris[, 5]
# apply PCA - scale. = TRUE is highly
# advisable, but default is FALSE.
ir.pca <- prcomp(log.ir, center = TRUE,scale. = TRUE)
# print method
print(ir.pca)
# plot method
plot(ir.pca, type = "l")
# summary method
summary(ir.pca)
# Predict PCs
predict(ir.pca, newdata=tail(log.ir, 2))
install.packages("devtools")
install.packages("devtools")
library(ggbiplot)
g <- ggbiplot(ir.pca, obs.scale = 1, var.scale = 1,
groups = ir.species, ellipse = TRUE,
circle = TRUE)
g <- g + scale_color_discrete(name = '')
g <- g + theme(legend.direction = 'horizontal',
legend.position = 'top')
print(g)
require(caret)
trans = preProcess(iris[,1:4],
method=c("BoxCox", "center",
"scale", "pca"))
PC = predict(trans, iris[,1:4])
# Retained PCs
head(PC, 3)
##EXEMPLO 2
data("iris")
str(iris)
summary(iris)
##partition data
set.seed(111)
ind <- sample(2, nrow(iris), replace = TRUE, prob = c(0.8, 0.2))
training <- iris[ind==1, ]
testing <- iris[ind==2, ]
##Scatter Plots e Coeficientes de Correlacao
library(psych)
pairs.panels(training[ ,-5], gap = 0, bg = c("red", "yellow", "blue")[training$Species])
##PCA principal component analysis
pc<- prcomp(training[ ,-5], center = TRUE, scale. = TRUE)
attributes(pc)
pc$center
mean(training$Sepal.Length)
pc$scale
sd(training$Sepal.Length)
pc
summary(pc)
##Ortoganalidade dos principais componentes
pairs.panels(pc$x,
gap=0,
bg=c("red","yellow","blue")[training$Species],
pch = 21)
##bi-plot
library(devtools)
library(ggbiplot)
g <- ggbiplot(pc, obs.scale = 1, var.scale = 1, groups = training$Species, ellipse = TRUE, circle = TRUE, ellipse.prob = 0.68)
g <- g + scale_color_discrete(name = '')
g <- g + theme(legend.direction = 'horizontal', legend.position = 'top')
print(g)
library(swirl)
swirl()
str(diamonds)
qplot(proce, data = diamonds)
qplot(price, data = diamonds)
range(diamonds$price)
qplot(price, data = diamonds, binwidth = max(diamonds$price) / min(diamonds$price))
qplot(price, data = diamonds, binwidth = 18497/30)
brk
counts
qplot(price, data = diamonds, binwidth = 18497/30, fill = cut
qplot(price, data = diamonds, binwidth = 18497/30, fill = cut)
qplot(price, data = diamonds, geom = "desnsity")
qplot(price, data = diamonds, geom = "desnsity")
qplot(price, data = diamonds, geom = "density")
qplot(price, data = diamonds, geom = "density", color = cut)
qplot(carat, price, data = diamonds)
qplot(carat, price, data = diamonds, shape = cut)
qplot(carat, price, data = diamonds, color = cut)
qplot(carat, price, data = diamonds, color = cut, geom = "smooth")
qplot(carat, price, data = diamonds, color = cut) + geom_smooth(method = "lm")
qplot(carat, price, data = diamonds, color = cut, facets = .~cut()) + geom_smooth(method = "lm")
qplot(carat, price, data = diamonds, color = cut, facets = .~cut + geom_smooth(method = "lm")
qplot(carat, price, data = diamonds, color = cut, facets = .~cut) + geom_smooth(method = "lm")
qplot(carat, price, data = diamonds, color = cut) + geom_smooth(method = "lm", facets = .~cut)
qplot(carat, price, data = diamonds, color = cut, facets = .~cut) + geom_smooth(method = "lm")
g <- ggplot(data = diamonds, abs(depth, price))
g <- ggplot(data = diamonds, abs(depth, price))
g <- ggplot(data = diamonds, aes(depth, price))
summary(g)
g + geom_point(alpha = 1/3
g + geom_point(alpha = 1/3)
cutpoints <- quantile(diamonds$carat, seq(0,1, length = 4), na.rm = TRUE)
cutpoints
diamonds$car2 <- cut(diamonds$carat, cutpoints)
g <- ggplot(data = diamonds, aes(depth, price))
g + geom_point(alpha = 1/3) + facet_grid(cut ~ car2)
diamonds[myd,]
g + geom_point(method = "lm", size = 3, color = "pink") + facet_grid(cut ~ car2)
Type g+geom_point(alpha=1/3)+facet_grid(cut~car2)+geom_smooth(method="lm",size=3,color="pink")
g+geom_point(alpha=1/3)+facet_grid(cut~car2)+geom_smooth(method="lm",size=3,color="pink")
ggplot(data = diamonds, aes(carat, price)) + geom_boxplot() = facet_grid(.~cut)
ggplot(data = diamonds, aes(carat, price)) + geom_boxplot() + facet_grid(.~cut)
setwd('~/OneDrive/Cursos/Coursera/DataScienceSpecialization/Exploratory Data Analysis/week4/coursera/eda/ex1/')
summarySCC_PM25 <- readRDS("FNEI_data/summarySCC_PM25.rds")
Source_Classification_Code <- readRDS("FNEI_data/Source_Classification_Code.rds")
#Criamos o subconjunto de dados / Create a subset
cidade_veiculos <- subset(summarySCC_PM25, summarySCC_PM25$fips %in% c("24510", "06037") & summarySCC_PM25$type == "ON-ROAD")
cidade_veiculos$fips = ifelse(cidade_veiculos$fips == "24510", "Baltimore", "Los Angeles")
#Fazemos o agregado de emissoes por ano por ano - cidade / Agreggate the data emissions by year and city
veiculos <- aggregate(Emissions ~ year + fips, cidade_veiculos, sum)
par(mfrow=c(1,2))
#Primeiro plot de linhas / First plot by lines
library(ggplot2)
ggplot(veiculos, aes(year, Emissions, col=(fips))) +
geom_line() +
geom_point(col = "magenta") +
ggtitle(expression("Emissoes Anuais de PM2.5 por Veiculos em Baltimore e Los Angeles"))+
theme(legend.title = element_text(face = "bold")) +
ylab(expression("Emissoes de PM2.5 (Toneladas)")) +
xlab("Ano") +
scale_colour_discrete(name = "Fontes")
#Grafico de barras / barplot
#N??o esta ajustando ano inteiro, ver:
ggplot(cidade_veiculos, aes(x=year, y=Emissions, fill=fips)) +
geom_bar(aes(fill=year),stat="identity") +
facet_grid(.~fips) +
guides(fill=FALSE) + theme_bw() +
labs(x="year", y=expression("Total PM"[2.5]*" Emission (Kilo-Tons)")) +
labs(title=expression("PM"[2.5]*" Motor Vehicle Source Emissions in Baltimore & LA, 1999-2008"))
#Grafico de barras / barplot
#N??o esta ajustando ano inteiro, ver:
ggplot(cidade_veiculos, aes(x=year, y=Emissions, fill=fips)) +
geom_bar(aes(fill=year),stat="identity") +
facet_grid(.~fips) +
guides(fill=FALSE) + theme_bw() +
labs(x="year", y=expression("Total PM"[2.5]*" Emission (Kilo-Tons)")) +
labs(title=expression("PM"[2.5]*" Motor Vehicle Source Emissions in Baltimore & LA, 1999-2008"))
#Criamos o device para gerar um arquivo png / Create a device to obtain a png file
png("Plot6.png", width=480, height=480)
ggplot(veiculos, aes(year, Emissions, col=(fips))) +
geom_line() +
geom_point(col = "magenta") +
ggtitle(expression("Emissoes Anuais de PM2.5 por Veiculos em Baltimore e Los Angeles"))+
theme(legend.title = element_text(face = "bold")) +
ylab(expression("Emissoes de PM2.5 (Toneladas)")) +
xlab("Ano") +
scale_colour_discrete(name = "Fontes")
dev.off()
#Criamos o segundo device para gerar um arquivo png B/ Create a second device to obtain a png file B
png("Plot6b.png", width=480, height=480)
ggplot(cidade_veiculos, aes(x=year, y=Emissions, fill=fips)) +
geom_bar(aes(fill=year),stat="identity") +
facet_grid(.~fips) +
guides(fill=FALSE) + theme_bw() +
labs(x="Anos", y=expression("Emissoes de PM2.5 (Toneladas)")) +
labs(title=expression("PM"[2.5]*" Emissoes Anuais de PM2.5 por Veiculos em Baltimore e Los Angeles"))
dev.off()
#Grafico de barras / barplot
#N??o esta ajustando ano inteiro, ver:
ggplot(cidade_veiculos, aes(x=year, y=Emissions, fill=fips)) +
geom_bar(aes(fill=year),stat="identity") +
facet_grid(.~fips) +
guides(fill=FALSE) + theme_bw() +
labs(x="year", y=expression("Total PM"[2.5]*" Emission (Kilo-Tons)")) +
labs(title=expression("PM"[2.5]*" Motor Vehicle Source Emissions in Baltimore & LA, 1999-2008"))  +
xlim(1998, 2008)
#Grafico de barras / barplot
#N??o esta ajustando ano inteiro, ver:
ggplot(cidade_veiculos, aes(x=year, y=Emissions, fill=fips)) +
geom_bar(aes(fill=year),stat="identity") +
facet_grid(.~fips) +
guides(fill=FALSE) + theme_bw() +
labs(x="year", y=expression("Total PM"[2.5]*" Emission (Kilo-Tons)")) +
labs(title=expression("PM"[2.5]*" Motor Vehicle Source Emissions in Baltimore & LA, 1999-2008"))  +
xlim(1999, 2008)
#Grafico de barras / barplot
#N??o esta ajustando ano inteiro, ver:
ggplot(cidade_veiculos, aes(x=year, y=Emissions, fill=fips)) +
geom_bar(aes(fill=year),stat="identity") +
facet_grid(.~fips) +
guides(fill=FALSE) + theme_bw() +
labs(x="year", y=expression("Total PM"[2.5]*" Emission (Kilo-Tons)")) +
labs(title=expression("PM"[2.5]*" Motor Vehicle Source Emissions in Baltimore & LA, 1999-2008"))  +
xlim(1997, 2008)
#Grafico de barras / barplot
#N??o esta ajustando ano inteiro, ver:
ggplot(cidade_veiculos, aes(x=year, y=Emissions, fill=fips)) +
geom_bar(aes(fill=year),stat="identity") +
facet_grid(.~fips) +
guides(fill=FALSE) + theme_bw() +
labs(x="year", y=expression("Total PM"[2.5]*" Emission (Kilo-Tons)")) +
labs(title=expression("PM"[2.5]*" Motor Vehicle Source Emissions in Baltimore & LA, 1999-2008"))  +
xlim(1997, 2008)
#Grafico de barras / barplot
#N??o esta ajustando ano inteiro, ver:
ggplot(cidade_veiculos, aes(x=year, y=Emissions, fill=fips)) +
geom_bar(aes(fill=year),stat="identity") +
facet_grid(.~fips) +
guides(fill=FALSE) + theme_bw() +
labs(x="year", y=expression("Total PM"[2.5]*" Emission (Kilo-Tons)")) +
labs(title=expression("PM"[2.5]*" Motor Vehicle Source Emissions in Baltimore & LA, 1999-2008"))  +
xlim(1996, 2008)
#Grafico de barras / barplot
#N??o esta ajustando ano inteiro, ver:
ggplot(cidade_veiculos, aes(x=year, y=Emissions, fill=fips)) +
geom_bar(aes(fill=year),stat="identity") +
facet_grid(.~fips) +
guides(fill=FALSE) + theme_bw() +
labs(x="year", y=expression("Total PM"[2.5]*" Emission (Kilo-Tons)")) +
labs(title=expression("PM"[2.5]*" Motor Vehicle Source Emissions in Baltimore & LA, 1999-2008"))  +
xlim(1996, 2009)
#Grafico de barras / barplot
#N??o esta ajustando ano inteiro, ver:
ggplot(cidade_veiculos, aes(x=year, y=Emissions, fill=fips)) +
geom_bar(aes(fill=year),stat="identity") +
facet_grid(.~fips) +
guides(fill=FALSE) + theme_bw() +
labs(x="year", y=expression("Total PM"[2.5]*" Emission (Kilo-Tons)")) +
labs(title=expression("PM"[2.5]*" Motor Vehicle Source Emissions in Baltimore & LA, 1999-2008"))  +
xlim(1996, 2014)
#Grafico de barras / barplot
#N??o esta ajustando ano inteiro, ver:
ggplot(cidade_veiculos, aes(x=year, y=Emissions, fill=fips)) +
geom_bar(aes(fill=year),stat="identity") +
facet_grid(.~fips) +
guides(fill=FALSE) + theme_bw() +
labs(x="year", y=expression("Total PM"[2.5]*" Emission (Kilo-Tons)")) +
labs(title=expression("PM"[2.5]*" Motor Vehicle Source Emissions in Baltimore & LA, 1999-2008"))  +
xlim(1996, 2011)
#Grafico de barras / barplot
#N??o esta ajustando ano inteiro, ver:
ggplot(cidade_veiculos, aes(x=year, y=Emissions, fill=fips)) +
geom_bar(aes(fill=year),stat="identity") +
facet_grid(.~fips) +
guides(fill=FALSE) + theme_bw() +
labs(x="year", y=expression("Total PM"[2.5]*" Emission (Kilo-Tons)")) +
labs(title=expression("PM"[2.5]*" Motor Vehicle Source Emissions in Baltimore & LA, 1999-2008"))  +
xlim(1996, 2011)
#Grafico de barras / barplot
#N??o esta ajustando ano inteiro, ver:
ggplot(cidade_veiculos, aes(x=year, y=Emissions, fill=fips)) +
geom_bar(aes(fill=year),stat="identity") +
facet_grid(.~fips) +
guides(fill=FALSE) + theme_bw() +
labs(x="year", y=expression("Total PM"[2.5]*" Emission (Kilo-Tons)")) +
labs(title=expression("PM"[2.5]*" Motor Vehicle Source Emissions in Baltimore & LA, 1999-2008"))  +
xlim(1996, 2011)
#Criamos o segundo device para gerar um arquivo png B/ Create a second device to obtain a png file B
png("Plot6b.png", width=480, height=480)
ggplot(cidade_veiculos, aes(x=year, y=Emissions, fill=fips)) +
geom_bar(aes(fill=year),stat="identity") +
facet_grid(.~fips) +
guides(fill=FALSE) + theme_bw() +
labs(x="year", y=expression("Total PM"[2.5]*" Emission (Kilo-Tons)")) +
labs(title=expression("PM"[2.5]*" Motor Vehicle Source Emissions in Baltimore & LA, 1999-2008"))  +
xlim(1996, 2011)
dev.off()
#Grafico de barras / barplot
#N??o esta ajustando ano inteiro, ver:
ggplot(cidade_veiculos, aes(x=year, y=Emissions, fill=fips)) +
geom_bar(aes(fill=year),stat="identity") +
facet_grid(.~fips) +
guides(fill=FALSE) + theme_bw() +
labs(x="year", y=expression("Total PM"[2.5]*" Emission (Kilo-Tons)")) +
labs(title=expression("PM"[2.5]*" Motor Vehicle Source Emissions in Baltimore & LA, 1999-2008"))  +
xlim(1997, 2011)
#Grafico de barras / barplot
#N??o esta ajustando ano inteiro, ver:
ggplot(cidade_veiculos, aes(x=year, y=Emissions, fill=fips)) +
geom_bar(aes(fill=year),stat="identity") +
facet_grid(.~fips) +
guides(fill=FALSE) + theme_bw() +
labs(x="year", y=expression("Total PM"[2.5]*" Emission (Kilo-Tons)")) +
labs(title=expression("PM"[2.5]*" Motor Vehicle Source Emissions in Baltimore & LA, 1999-2008"))  +
xlim(1997, 2011)
#Grafico de barras / barplot
#N??o esta ajustando ano inteiro, ver:
ggplot(cidade_veiculos, aes(x=year, y=Emissions, fill=fips)) +
geom_bar(aes(fill=year),stat="identity") +
facet_grid(.~fips) +
guides(fill=FALSE) + theme_bw() +
labs(x="year", y=expression("Total PM"[2.5]*" Emission (Kilo-Tons)")) +
labs(title=expression("PM"[2.5]*" Motor Vehicle Source Emissions in Baltimore & LA, 1999-2008"))
#Grafico de barras / barplot
#N??o esta ajustando ano inteiro, ver:
ggplot(cidade_veiculos, aes(x=year, y=Emissions, fill=fips)) +
geom_bar(aes(fill=year),stat="identity") +
facet_grid(.~fips) +
guides(fill=FALSE) + theme_bw() +
labs(x="year", y=expression("Total PM"[2.5]*" Emission (Kilo-Tons)")) +
labs(title=expression("PM"[2.5]*" Motor Vehicle Source Emissions in Baltimore & LA, 1999-2008"))  +
xlim(1997, 2011)
#Grafico de barras / barplot
#N??o esta ajustando ano inteiro, ver:
ggplot(cidade_veiculos, aes(x=year, y=Emissions, fill=fips)) +
geom_bar(aes(fill=year),stat="identity") +
facet_grid(.~fips) +
guides(fill=FALSE) + theme_bw() +
labs(x="year", y=expression("Total PM"[2.5]*" Emission (Kilo-Tons)")) +
labs(title=expression("PM"[2.5]*" Motor Vehicle Source Emissions in Baltimore & LA, 1999-2008"))  +
xlim(1997, 2011)
